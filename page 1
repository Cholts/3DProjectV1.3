// vr-viewer.js

let scene, camera, renderer;
let modelUrl = null;  // Store the model URL from file input
let modelObject = null;
let annotations = [];  // Array to store annotations
let annotationsDiv = document.getElementById('annotations');
let uploadedModel = false;

// Handle the file upload
document.getElementById('fileInput').addEventListener('change', handleFileUpload);

function handleFileUpload(event) {
  const file = event.target.files[0];
  if (file && (file.name.endsWith('.glb') || file.name.endsWith('.gltf'))) {
    const reader = new FileReader();
    reader.onload = function(e) {
      modelUrl = e.target.result;
      loadModel();
    };
    reader.readAsArrayBuffer(file);
  } else {
    alert('Please upload a valid .glb or .gltf model');
  }
}

// Initialize the 3D scene
function init() {
  scene = new THREE.Scene();
  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
  renderer = new THREE.WebGLRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.getElementById('webxr-container').appendChild(renderer.domElement);

  // Lighting
  const light = new THREE.AmbientLight(0x404040, 5);
  scene.add(light);

  // WebXR session setup
  if (navigator.xr) {
    const xrButton = document.createElement('button');
    xrButton.innerHTML = "Enter VR";
    document.body.appendChild(xrButton);
    xrButton.onclick = () => {
      navigator.xr.requestSession('immersive-vr').then(onSessionStarted);
    };
  }

  animate();
}

// Load the 3D model dynamically based on the uploaded file
function loadModel() {
  if (modelUrl && !uploadedModel) {
    const loader = new THREE.GLTFLoader();
    loader.load(modelUrl, function(gltf) {
      modelObject = gltf.scene;
      scene.add(modelObject);
      modelObject.scale.set(0.5, 0.5, 0.5); // Scale the model
      uploadedModel = true;
      createAnnotations();  // After model loads, create annotations
    });

    // Camera Position
    camera.position.z = 3;
  }
}

// Create interactive annotations after model is loaded
function createAnnotations() {
  // Example of hardcoded annotations
  annotations.push({ 
    name: 'Annotation 1', 
    position: { x: 1, y: 0, z: 0 }, 
    text: 'This is part 1 of the model'
  });
  annotations.push({ 
    name: 'Annotation 2', 
    position: { x: -1, y: 0, z: 0 }, 
    text: 'This is part 2 of the model'
  });

  // Loop through annotations and create clickable spheres in 3D
  annotations.forEach((annotation, index) => {
    const geometry = new THREE.SphereGeometry(0.05);
    const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });
    const sphere = new THREE.Mesh(geometry, material);
    sphere.position.set(annotation.position.x, annotation.position.y, annotation.position.z);
    scene.add(sphere);

    // Create annotation text in the UI
    const annotationText = document.createElement('div');
    annotationText.className = 'annotation';
    annotationText.innerText = annotation.text;
    annotationText.style.top = `${Math.random() * 100}%`;
    annotationText.style.left = `${Math.random() * 100}%`;
    annotationsDiv.appendChild(annotationText);

    // Add interactivity to annotations
    sphere.onClick = () => {
      alert(`Annotation: ${annotation.text}`);
    };
  });
}

function animate() {
  if (modelObject) {
    modelObject.rotation.y += 0.01; // Rotate the model slightly to make it more interactive
  }
  renderer.setAnimationLoop(animate);
  renderer.render(scene, camera);
}

function enterVR() {
  if (navigator.xr) {
    navigator.xr.requestSession('immersive-vr').then(function(session) {
      renderer.xr.enabled = true;
      renderer.xr.setSession(session);
      animate();
    });
  } else {
    alert('WebXR not supported on this device.');
  }
}

// Initialize the scene when the page loads
init();
